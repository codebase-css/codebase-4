{"version":3,"sources":["activator.js"],"names":["clickAways","Array","from","document","querySelectorAll","controls","forEach","element","elementAriaControls","getAttribute","myClasses","split","i","length","elementComponentClass","concat","apply","indexOf","classList","add","querySelector","closest","event","stopPropagation","clickAwayActive","setAttribute","remove","body","activeAriaControls","this","activePanel","activePanelCloses","activeComponentClass","activeComponent","dataControl","control","dataClickAway","dataset","dataScrollLock","clickAway","scrollLock","deactivateToggle","windowWidth","window","innerWidth","addEventListener","deactivateResize","toggle","activeControlActive","onkeydown","key","panels","contains","activeSiblings","deactivateSiblings"],"mappings":"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","file":"activator.js","sourcesContent":["/*!\n * CODEBASE ACTIVATOR\n * MIT Licence\n * Unchanged since v4.0.5\n */\n\nconst clickAways = Array.from(document.querySelectorAll('[data-click-away=\"true\"]'));\nconst controls = Array.from(document.querySelectorAll('[class*=-control]'));\nconst panels = Array.from(document.querySelectorAll('[class*=-panel]'));\n//const closes = Array.from(document.querySelectorAll('[class*=-close]'));\n\n// Find and decorate the click-away dismissers\nclickAways.forEach(element => {\n  let elementAriaControls = element.getAttribute('aria-controls');\n  let myClasses = element.getAttribute('class').split(' ');\n  for (let i = 0; i < myClasses.length; i++) {\n    myClasses[i] = myClasses[i].split('-');\n  }\n  myClasses = [].concat.apply([], myClasses);\n  let elementComponentClass = '.' + myClasses[myClasses.indexOf('control') - 1] + '-wrapper';\n\n  element.classList.add('click-away');\n  document.querySelector('#' + elementAriaControls).classList.add('click-away');\n  if (document.querySelector('#' + elementAriaControls).closest(elementComponentClass) != null) {\n    document.querySelector('#' + elementAriaControls).closest(elementComponentClass).classList.add('click-away');\n  }\n});\n\n// Do something\ncontrols.forEach(element => {\n  element.addEventListener('click', function (event) {\n\n    event.stopPropagation();\n\n    // You only need to uncomment this if you must have a “double duty” hyperlink, \n    // e.g. the first-click opens a sub-menu, then second-click follows the link.\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    // if (event.target.nodeName.toLowerCase() === 'a') {\n    //   if (!event.target.classList.contains('active')) {\n    //     event.preventDefault();\n    //   }\n    // }\n\n    let myClasses = this.getAttribute('class').split(' ');\n    for (let i = 0; i < myClasses.length; i++) {\n      myClasses[i] = myClasses[i].split('-');\n    }\n    myClasses = [].concat.apply([], myClasses);\n\n    let activeControlActive = this.classList.contains('active');\n    let activeAriaControls = this.getAttribute('aria-controls');\n    let activePanel = document.querySelector('#' + activeAriaControls);\n    let activePanelCloses = activePanel.querySelectorAll('[class*=-close]');\n    let activeComponentClass = '.' + myClasses[myClasses.indexOf('control') - 1] + '-wrapper';\n    let activeComponent = activePanel.closest(activeComponentClass);\n    let dataControl = this.dataset.control;\n    let dataClickAway = this.dataset.clickAway;\n    let dataScrollLock = this.dataset.scrollLock;\n\n    const clickAway = () => {\n      let clickAwayActive = document.querySelectorAll('.click-away.active');\n      \n      clickAwayActive.forEach(element => {\n        element.classList.remove('active');\n        element.setAttribute(\"aria-expanded\", \"false\"); // if it has aria-expanded\n      });\n      // Disable any scroll lock\n      document.body.classList.remove('body-scroll-lock');\n    }\n    clickAway();\n\n    const documentClickAway = () => {\n      document.body.addEventListener('click', () => {\n        if (dataClickAway) {\n          clickAway();\n        }\n      });\n    }\n    documentClickAway();\n\n    const deactivateToggle = () => {\n      element.classList.remove('active');\n      element.setAttribute('aria-expanded', 'false');\n      activePanel.classList.remove('active');\n      if (activeComponent !== null) {\n        activeComponent.classList.remove('active');\n      }\n      document.body.classList.remove('body-scroll-lock');\n    }\n\n    // Deactivate siblings e.g. used in tabs, slideshows\n    const deactivateSiblings = () => {\n      let activeSiblings = activeComponent.querySelectorAll('.active')\n      for (let i = 0; i < activeSiblings.length; i++) {\n        activeSiblings[i].classList.remove('active');\n        activeSiblings[i].setAttribute(\"aria-expanded\", \"false\");\n      }\n    }\n\n    // Deactivate click-aways on window width resize -- because e.g. sometimes used on \n    // navicon menus that you don’t want activated above a particular breakpoint width\n    const deactivateResize = () => {\n      let windowWidth = window.innerWidth;\n      window.addEventListener('resize', function () {\n        if ( window.innerWidth !== windowWidth && dataClickAway === 'true') {\n          clickAway();\n        }\n      });\n    }\n    deactivateResize();\n\n    const activateScrollLock = () => {\n      if (dataScrollLock === 'true') {\n        document.body.classList.toggle('body-scroll-lock');\n      }\n    }\n    activateScrollLock();\n\n    // The Activators\n    // ~~~~~~~~~~~~~~\n    // Must be EITHER a toggle OR a tab\n\n    // Toggle has no siblings (but can have optional click-away)\n    if (dataControl === 'toggle') {\n      if (activeControlActive) {\n        deactivateToggle();\n      } else {\n        element.classList.add('active');\n        element.setAttribute('aria-expanded', 'true');\n        activePanel.classList.add('active');\n        if (activeComponent !== null) {\n          activeComponent.classList.add('active');\n        }\n\n        document.onkeydown = event => {\n          event = event || window.event;\n          if ((event.key === \"Escape\" || event.key === \"Esc\")) {\n            deactivateToggle();\n          }\n        };\n\n        // Stop propagation when clicking activator panel (so that `click away` is not triggered)\n        panels.forEach(element => {\n          element.addEventListener('click', event => {\n            event.stopPropagation();\n          });\n        });\n\n        // Deactivate on close (internal dismiss)\n        activePanelCloses.forEach(element => {\n          element.addEventListener('click', () => {\n            deactivateToggle();\n          });            \n        });\n\n      }\n    }\n    \n    // Tab only works if there is more than one tab (and assumes that one will start as `.active`)\n    if (dataControl === 'tab') {\n      if ( ! this.classList.contains('active')) {\n        clickAway();\n        deactivateSiblings();\n        this.classList.add('active');\n        this.setAttribute(\"aria-expanded\", \"true\");\n        activePanel.classList.add('active');\n      }\n    }\n\n  });    \n});"]}