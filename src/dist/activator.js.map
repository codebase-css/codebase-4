{"version":3,"sources":["activator.js"],"names":["document","addEventListener","clickAways","from","querySelectorAll","Array","controls","panels","forEach","element","elementAriaControls","getAttribute","myClasses","split","i","length","elementComponentClass","concat","apply","indexOf","classList","add","querySelector","closest","event","stopPropagation","clickAwayActive","setAttribute","remove","body","activeAriaControls","this","activePanel","activeComponentClass","activeComponent","dataControl","control","dataClickAway","dataset","dataScrollLock","clickAway","scrollLock","deactivateToggle","windowWidth","window","innerWidth","deactivateResize","toggle","activeControlActive","key","contains","activeSiblings","deactivateSiblings"],"mappings":"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","file":"activator.js","sourcesContent":["/*!\n * CODEBASE v.4 ACTIVATOR\n * MIT Licence\n * v4.0.2\n */\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const clickAways = Array.from(document.querySelectorAll('[data-click-away=\"true\"]'));\n  const controls = Array.from(document.querySelectorAll('[class*=-control]'));\n  const panels = Array.from(document.querySelectorAll('[class*=-panel]'));\n  const closure = Array.from(document.querySelectorAll('[class*=-close]'));\n\n  // Find and decorate the click-away dismissers\n  clickAways.forEach(element => {\n    let elementAriaControls = element.getAttribute('aria-controls');\n    let myClasses = element.getAttribute('class').split(' ');\n    for (let i = 0; i < myClasses.length; i++) {\n      myClasses[i] = myClasses[i].split('-');\n    }\n    myClasses = [].concat.apply([], myClasses);\n    let elementComponentClass = '.' + myClasses[myClasses.indexOf('control') - 1] + '-wrapper';\n\n    element.classList.add('click-away');\n    document.querySelector('#' + elementAriaControls).classList.add('click-away');\n    if (document.querySelector('#' + elementAriaControls).closest(elementComponentClass) != null) {\n      document.querySelector('#' + elementAriaControls).closest(elementComponentClass).classList.add('click-away');\n    }\n  });\n\n  // Do something\n  controls.forEach(element => {\n    element.addEventListener('click', function (event) {\n\n      event.stopPropagation();\n\n      // You only need to uncomment this if you must have a “double duty” hyperlink, \n      // e.g. the first-click opens a sub-menu, then second-click follows the link.\n      // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      // if (event.target.nodeName.toLowerCase() === 'a') {\n      //   if (!event.target.classList.contains('active')) {\n      //     event.preventDefault();\n      //   }\n      // }\n\n      let myClasses = this.getAttribute('class').split(' ');\n      for (let i = 0; i < myClasses.length; i++) {\n        myClasses[i] = myClasses[i].split('-');\n      }\n      myClasses = [].concat.apply([], myClasses);\n\n      let activeControlActive = this.classList.contains('active');\n      let activeAriaControls = this.getAttribute('aria-controls');\n      let activePanel = document.querySelector('#' + activeAriaControls);\n      let activeComponentClass = '.' + myClasses[myClasses.indexOf('control') - 1] + '-wrapper';\n      let activeComponent = activePanel.closest(activeComponentClass);\n      let dataControl = this.dataset.control;\n      let dataClickAway = this.dataset.clickAway;\n      let dataScrollLock = this.dataset.scrollLock;\n\n      const clickAway = () => {\n        let clickAwayActive = document.querySelectorAll('.click-away.active');\n        \n        clickAwayActive.forEach(element => {\n          element.classList.remove('active');\n          element.setAttribute(\"aria-expanded\", \"false\"); // if it has aria-expanded\n        });\n        // Disable any scroll lock\n        document.body.classList.remove('body-scroll-lock');\n      }\n      clickAway();\n\n      const documentClickAway = () => {\n        document.body.addEventListener('click', () => {\n          if (dataClickAway) {\n            clickAway();\n          }\n        });\n      }\n      documentClickAway();\n\n      const deactivateToggle = () => {\n        element.classList.remove('active');\n        element.setAttribute('aria-expanded', 'false');\n        activePanel.classList.remove('active');\n        if (activeComponent !== null) {\n          activeComponent.classList.remove('active');\n        }\n        document.body.classList.remove('body-scroll-lock');\n      }\n\n      // Deactivate siblings e.g. used in tabs, slideshows\n      const deactivateSiblings = () => {\n        let activeSiblings = activeComponent.querySelectorAll('.active')\n        for (let i = 0; i < activeSiblings.length; i++) {\n          activeSiblings[i].classList.remove('active');\n          activeSiblings[i].setAttribute(\"aria-expanded\", \"false\");\n        }\n      }\n\n      // Deactivate click-aways on window width resize -- because e.g. sometimes used on \n      // navicon menus that you don’t want activated above a particular breakpoint width\n      const deactivateResize = () => {\n        let windowWidth = window.innerWidth;\n        window.addEventListener('resize', function () {\n          if ( window.innerWidth !== windowWidth && dataClickAway === 'true') {\n            clickAway();\n          }\n        });\n      }\n      deactivateResize();\n\n      const activateScrollLock = () => {\n        if (dataScrollLock === 'true') {\n          document.body.classList.toggle('body-scroll-lock');\n        }\n      }\n      activateScrollLock();\n\n      // The Activators\n      // ~~~~~~~~~~~~~~\n      // Must be EITHER a toggle OR a tab\n\n      // Toggle has no siblings (but can have optional click-away)\n      if (dataControl === 'toggle') {\n        if (activeControlActive) {\n          element.classList.remove('active');\n          element.setAttribute('aria-expanded', 'false');\n          activePanel.classList.remove('active');\n          if (activeComponent !== null) {\n            activeComponent.classList.remove('active');\n          }\n        } else {\n          element.classList.add('active');\n          element.setAttribute('aria-expanded', 'true');\n          activePanel.classList.add('active');\n          if (activeComponent !== null) {\n            activeComponent.classList.add('active');\n          }\n\n          document.onkeydown = event => {\n            event = event || window.event;\n            if ((event.key === \"Escape\" || event.key === \"Esc\")) {\n              deactivateToggle();\n            }\n          };\n\n          // Stop propagation when clicking activator panel (so that `click away` is not triggered)\n          panels.forEach(element => {\n            element.addEventListener('click', function(event) {\n              event.stopPropagation();\n            });\n          });\n\n          // Deactivate on close (internal dismiss)\n          closure.forEach(element => {\n            element.addEventListener('click', () => {\n              deactivateToggle();\n            });            \n          });\n\n        }\n      }\n      \n      // Tab only works if there is more than one tab (and assumes that one will start as `.active`)\n      if (dataControl === 'tab') {\n        if ( ! this.classList.contains('active')) {\n          clickAway();\n          deactivateSiblings();\n          this.classList.add('active');\n          this.setAttribute(\"aria-expanded\", \"true\");\n          activePanel.classList.add('active');\n        }\n      }\n\n    });    \n  });\n\n});"]}