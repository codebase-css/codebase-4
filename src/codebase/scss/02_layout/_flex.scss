// LAYOUT: FLEXBOX
// ~~~~~~~~~~~~~~~

@mixin flex {
  display: flex;
  &-grid {
    display: flex;
    flex-wrap: wrap;
  }
  &-wrap {
    flex-wrap: wrap;
  }
  &-row-reverse {
    flex-direction: row-reverse;
  }
  &-column {
    flex-direction: column;
  }
  &-column-reverse {
    flex-direction: column-reverse;
  }
  // Stretching
  &-grow-equal {
    > * {
      flex: 1;
    }
  }
  &-grow-auto {
    > * {
      flex: auto;
    }
  }
  // Spacing (for gap see below)
  &-space-around {
    justify-content: space-around;
  }
  &-space-between {
    justify-content: space-between;
  }
  &-space-evenly {
    justify-content: space-evenly;
  }
  &-start {
    justify-content: flex-start;
  }
  &-center {
    justify-content: center;
  }
  &-end {
    justify-content: flex-end;
  }
  &-top {
    align-items: flex-start;
  }
  &-middle {
    align-items: center;
  }
  &-bottom {
    align-items: flex-end;
  }
}

@mixin flex-gap {
  //gap: $flex-gap-width;       // bleeding edge; check CanIuse
  position: relative;
  width: calc(100% + #{$flex-gap-width});
  margin-right: -$flex-gap-width / 2;
  margin-left: -$flex-gap-width / 2;
  > * {
    margin-bottom: $flex-gap-width;
  }
  > *:not([class*="cols"]) {
    margin-right: $flex-gap-width / 2;
    margin-left: $flex-gap-width / 2;
  }
  > [class*="cols"] {
    padding-right: $flex-gap-width / 2;
    padding-left: $flex-gap-width / 2;
  }
}

.flex-gap {
  &.flex,
  &.flex-grid {
    @include flex-gap;
  }
  &.flex-sm {
    @include break-min($mq-sm) {
      @include flex-gap;
    }
  }
  &.flex-md {
    @include break-min($mq-md) {
      @include flex-gap;
    }
  }
  &.flex-lg {
    @include break-min($mq-lg) {
      @include flex-gap;
    }
  }
}


@mixin flex-cols {
  @if $include-flex-pseudo-grid == true {
    &-cols-1 {max-width: (1 / 12) * 100%}
    &-cols-2 {max-width: (2 / 12) * 100%}
    &-cols-3 {max-width: (3 / 12) * 100%}
    &-cols-4 {max-width: (4 / 12) * 100%}
    &-cols-5 {max-width: (5 / 12) * 100%}
    &-cols-6 {max-width: (6 / 12) * 100%}
    &-cols-7 {max-width: (7 / 12) * 100%}
    &-cols-8 {max-width: (8 / 12) * 100%}
    &-cols-9 {max-width: (9 / 12) * 100%}
    &-cols-10 {max-width: (10 / 12) * 100%}
    &-cols-11 {max-width: (11 / 12) * 100%}
    &-cols-12 {max-width: (12 / 12) * 100%}
  }
}

[class*="-cols"] {
  width: 100%;
}

.inline-flex {
  display: inline-flex !important;
}

.flex {
  @include flex;
  @if $include-flex-pseudo-grid == true {
    @include flex-cols;
  }
}
.flex-sm {
  @include break-min($mq-sm) {
    @include flex;
    @include flex-cols;
  }
}
.flex-md {
  @include break-min($mq-md) {
    @include flex;
    @include flex-cols;
  }
}
.flex-lg {
  @include break-min($mq-lg) {
    @include flex;
    @include flex-cols;
  }
}

// Individual flex items
.flex-item-grow-1 {
  flex-grow: 1;
}
.flex-item-order-start {
  order: 0;
}
.flex-item-order-end {
  order: 9999;
}